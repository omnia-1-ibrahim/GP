# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sGvmzfRlrsAXbLL4cjUmNDlQ_eUhsNGq
"""

pip install streamlit pandas scikit-learn matplotlib seaborn

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# عنوان التطبيق
st.title("تحليل وتوقع Churn لعملاء الاتصالات")

# رفع البيانات
uploaded_file = st.file_uploader("/content/WA_Fn-UseC_-Telco-Customer-Churn.csv", type="csv")

if uploaded_file is not None:
    # تحميل البيانات
    data = pd.read_csv(uploaded_file)

    # عرض البيانات الأولية
    st.subheader('البيانات الأولية')
    st.write(data.head())

    # عرض معلومات عن البيانات
    st.subheader('ملخص البيانات')
    st.write(data.describe())

    # تحليل استكشافي للبيانات
    st.subheader('تحليل استكشافي')
    churn_count = data['Churn'].value_counts()
    st.write("عدد العملاء الذين تركوا الخدمة:", churn_count[1])
    st.write("عدد العملاء الذين لم يتركوا الخدمة:", churn_count[0])

    # رسم بياني لتوزيع الـ Churn
    st.subheader('توزيع العملاء حسب Churn')
    sns.countplot(x='Churn', data=data)
    st.pyplot(plt)

    # تجهيز البيانات للتعلم الآلي
    st.subheader('تحضير البيانات')

    # تحويل البيانات النصية إلى رقمية باستخدام LabelEncoder
    label_encoder = LabelEncoder()
    for column in data.columns:
        if data[column].dtype == 'object':
            data[column] = label_encoder.fit_transform(data[column])

    # تقسيم البيانات إلى الميزات والمتغير المستهدف
    X = data.drop('Churn', axis=1)
    y = data['Churn']

    # تقسيم البيانات إلى تدريب واختبار
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # اختيار النموذج
    st.subheader('اختيار النموذج')
    model_choice = st.selectbox("اختر النموذج الذي ترغب في استخدامه", ('Random Forest', 'Logistic Regression'))

    if model_choice == 'Random Forest':
        model = RandomForestClassifier()
    else:
        model = LogisticRegression()

    # تدريب النموذج
    model.fit(X_train, y_train)

    # التوقعات
    y_pred = model.predict(X_test)

    # عرض النتائج
    accuracy = accuracy_score(y_test, y_pred)
    st.write(f'دقة النموذج: {accuracy * 100:.2f}%')

    # عرض التقرير التفصيلي
    st.subheader('تقرير النموذج')
    st.text(classification_report(y_test, y_pred))

    # عرض مصفوفة الارتباك (Confusion Matrix)
    st.subheader('مصفوفة الارتباك')
    cm = confusion_matrix(y_test, y_pred)
    sns.heatmap(cm, annot=True, fmt="d", cmap="Blues")
    st.pyplot(plt)

    # عرض التوصيات بناءً على التحليل
    st.subheader('توصيات بناءً على التحليل')
    st.write("""
    1. العملاء الجدد هم الأكثر عرضة لترك الخدمة، لذلك يوصى بتقديم عروض جذابة لهم.
    2. يجب تقديم مكافآت للعملاء الذين لديهم عقود لمدة قصيرة لضمان استمرارهم.
    3. العملاء الذين استمروا لفترات طويلة في الخدمة يجب منحهم امتيازات للحفاظ على ولائهم.
    """)

# إذا لم يتم رفع ملف
else:
    st.write("يرجى رفع ملف البيانات لبدء التحليل.")



streamlit run /usr/local/lib/python3.10/dist-packages/colab_kernel_launcher.py

bash streamlit run اسم الملف.py